name: Version Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_type:
        description: 'Prerelease type (only for prerelease)'
        required: false
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - rc

jobs:
  version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Run tests
      run: bun test
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      id: version
      run: |
        if [ "${{ github.event.inputs.version_type }}" = "prerelease" ]; then
          # Handle prerelease versions
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [[ $CURRENT_VERSION =~ -[a-z]+\.[0-9]+ ]]; then
            # Already a prerelease, increment prerelease number
            NEW_VERSION=$(npm version prerelease --preid=${{ github.event.inputs.prerelease_type }} --no-git-tag-version)
          else
            # Not a prerelease, create new prerelease
            NEW_VERSION=$(npm version pre${{ github.event.inputs.version_type }} --preid=${{ github.event.inputs.prerelease_type }} --no-git-tag-version)
          fi
        else
          # Handle regular versions
          NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --no-git-tag-version)
        fi
        
        # Remove 'v' prefix if present
        NEW_VERSION=${NEW_VERSION#v}
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Build project
      run: bun run build
    
    - name: Commit version bump
      run: |
        git add package.json
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]"
    
    - name: Create and push tag
      run: |
        git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
        git push origin main
        git push origin "v${{ steps.version.outputs.new_version }}"
    
    - name: Create pre-release or release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        release_name: Release ${{ steps.version.outputs.new_version }}
        body: |
          ## Release ${{ steps.version.outputs.new_version }}
          
          This release was automatically created by the version management workflow.
          
          ### Installation
          ```bash
          npm install @beshkenadze/eyecite-js@${{ steps.version.outputs.new_version }}
          ```
          
          See the [CHANGELOG](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: ${{ contains(steps.version.outputs.new_version, '-') }}